#! /usr/bin/env bash

# uses APIs as documented on
# https://plex-docs.vercel.app/docs/plex

set -euo pipefail

# this defines '$product' and $client_id
. config.bash

token="$( cat "./token" )"

api-get() {
  local uri="$1"; shift

  curl \
    -XGET \
    --silent \
    --show-error \
    https://plex.tv/api/v2"$uri" \
    --header "accept: application/json" \
    --data "X-Plex-Product=$product" \
    --data "X-Plex-Client-Identifier=$client_id" \
    --data "X-Plex-Token=$token" \
    "$@"
}

get-user() {
  api-get /user
}

get-resources() {
  api-get /resources \
    --data 'includeRelay=0' \
    --data 'includeHttps=1' \
    --data 'X-Plex-Features=indirect-media'
}

get-media-servers() {
  get-resources \
    | jq '.[] | select(.product == "Plex Media Server")'
}

get-server() {
  local name="$1"

  get-media-servers \
    | jq --arg name "$name" 'select(.name == $name)'
}

media-server-names() {
  get-media-servers \
    | jq --raw-output '.name'
}

# take the input from get-server to list the
# libraries for this server
# example:
#   ./plex-api get-server 'luna' | ./plex-api get-libraries
get-libraries() {
  local server_json="$( cat )"

  #echo "json: $server_json"

  local access_token
  access_token="$( jq --raw-output .accessToken <<< "$server_json" )"

  echo "token: $access_token" >&2

  local uri
  uri="$( jq --raw-output '[.connections[] | select(.local == false)][-1].uri' <<< "$server_json" )"

  local url
  url="$uri/library/sections"

  echo "Getting $url" >&2
  curl \
    -L \
    --silent \
    --show-error \
    "$url" \
    --header 'accept: application/json' \
    --header "X-Plex-Token: $access_token"
}

# like get-libraries, but filter out just the movie libraries
# (ie: skip TV shows and pictures and music)
#
# example:
#   ./plex-api get-server 'luna' | ./plex-api get-movie-libraries
get-movie-libraries() {
  get-libraries \
    | jq '[.MediaContainer.Directory[] | select(.type == "movie")]'
}

"$@"
